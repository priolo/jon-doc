"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[258],{1415:t=>{t.exports=JSON.parse('{"blogPosts":[{"id":"usesyncexternalstore","metadata":{"permalink":"/jon-doc/blog/usesyncexternalstore","source":"@site/blog/2024-09-07-usesyncexternalstore.md","title":"React18: useSyncExternalStore","description":"Let\'s consider a simple ToDo","date":"2024-09-07T00:00:00.000Z","formattedDate":"September 7, 2024","tags":[{"label":"React18","permalink":"/jon-doc/blog/tags/react-18"},{"label":"hook","permalink":"/jon-doc/blog/tags/hook"},{"label":"useSyncExternalStore","permalink":"/jon-doc/blog/tags/use-sync-external-store"}],"readingTime":2.735,"hasTruncateMarker":false,"authors":[{"name":"Priolo","title":"Jon maintainer","url":"https://github.com/priolo","image_url":"https://github.com/priolo.png","imageURL":"https://github.com/priolo.png"}],"frontMatter":{"slug":"usesyncexternalstore","title":"React18: useSyncExternalStore","authors":{"name":"Priolo","title":"Jon maintainer","url":"https://github.com/priolo","image_url":"https://github.com/priolo.png","imageURL":"https://github.com/priolo.png"},"tags":["React18","hook","useSyncExternalStore"]}},"content":"Let\'s consider a simple ToDo  \\r\\n\\r\\n[codesandbox](https://codesandbox.io/s/to-do-vanilla-wgdgfg?file=/src/index.js)\\r\\n\\r\\nIn `index.js` there is a mess of functions within components passed between components that call other functions.  \\r\\nAnd if it were a real project it would be MUCH MUCH worse  \\r\\nbecause the COMPONENT TREE is **deeper**  \\r\\nand the nesting of COMPONENTs multiplies the complexity! \\r\\n\\r\\n\\r\\n### Let\'s create a STORE\\r\\nLet us try to extrapolate the LOGIC and STATUS from the COMPONENTs  \\r\\nto put it into a STORE.\\r\\n\\r\\n```js\\r\\nconst myStore = {\\r\\n\\t\\r\\n\\tcallbacks: new Set(),\\r\\n\\tsubscribe: (callback) => {\\r\\n\\t\\tmyStore.callbacks.add(callback)\\r\\n\\t\\treturn () => myStore.callbacks.delete(callback)\\r\\n\\t},\\r\\n\\tgetSnapshot: () => myStore.state,\\r\\n\\tchangeState: (newState) => {\\r\\n\\t\\tmyStore.state = newState\\r\\n\\t\\tmyStore.callbacks.forEach( cb => cb() )\\r\\n\\t},\\r\\n\\r\\n}\\r\\n```\\r\\n[codesandbox](https://codesandbox.io/s/to-do-usesyncexternalstore-brcpe3?file=/src/store.js:23-336)\\r\\n\\r\\nIt is a generic implementation of a STORE using [useSyncExternalStore](https://reactjs.org/docs/hooks-reference.html#usesyncexternalstore) \\r\\ntherefore:   \\r\\n- `subscribe`  \\r\\nStores a callback to be called when the STATE of the STORE is changed  \\r\\n- `getSnapshot`  \\r\\nReturns the current STATE   \\r\\n- `changeState`  \\r\\nIt is convenient to exchange one STATE for another STATE.   \\r\\nRemember that a STATE is immutable!  \\r\\nAnd notify all registered `callbacks` of the change \\r\\n\\r\\n\\r\\n### Enter the STATE\\r\\n\\r\\n```js\\r\\nconst myStore = {\\r\\n\\t...\\r\\n\\tstate: {\\r\\n\\t\\ttodos: [\\r\\n\\t\\t\\t{ desc : \\"init value\\" },\\r\\n\\t\\t],\\r\\n\\t\\ttodoInEdit: {\\r\\n\\t\\t\\tdesc: \\"\\"\\r\\n\\t\\t},\\r\\n\\t},\\r\\n\\t...\\r\\n}\\r\\n```\\r\\n[codesandbox](https://codesandbox.io/s/to-do-usesyncexternalstore-brcpe3?file=/src/store.js:339-460)\\r\\n\\r\\nIt is a picture of what our VIEW, in this case the ToDo app, should look like.  \\r\\nA STATE represents one and only one view of the VIEW.  \\r\\n\\r\\n### Enter the MUTATORS\\r\\n\\r\\n```js\\r\\nconst myStore = {\\r\\n\\t...\\r\\n\\tsetTodos: todos => myStore.changeState({\\r\\n\\t\\t...myStore.state,\\r\\n\\t\\ttodos\\r\\n\\t}),\\r\\n\\tsetTodoInEditProp: prop => myStore.changeState({\\r\\n\\t\\t...myStore.state,\\r\\n\\t\\ttodoInEdit: { ...myStore.state.todoInEdit, ...prop }\\r\\n\\t}),\\r\\n\\t...\\r\\n}\\r\\n```\\r\\n[codesandbox](https://codesandbox.io/s/to-do-usesyncexternalstore-brcpe3?file=/src/store.js:339-460)\\r\\n\\r\\nThey simply execute the `changeState` by passing it the modified STATE.  \\r\\nConsequently, they will notify the changes to the COMPONENTS.  \\r\\n(as said before)\\r\\n\\r\\n\\r\\n### Let\'s add the ACTIONS\\r\\n\\r\\n```js\\r\\nconst myStore = {\\r\\n\\t...\\r\\n\\tdeleteTodo: (index) => {\\r\\n\\t\\tconst newTodos = myStore.state.todos.filter ((_,i)=>i!==index)\\r\\n\\t\\tmyStore.setTodos(newTodos)\\r\\n\\t},\\r\\n\\taddTodoInEdit: () => {\\r\\n\\t\\tconst newTodos = [...myStore.state.todos, myStore.state.todoInEdit]\\r\\n\\t\\tmyStore.setTodos(newTodos)\\r\\n\\t\\tmyStore.setTodoInEditProp({desc: \\"\\"}) \\r\\n\\t},\\r\\n\\t...\\r\\n}\\r\\n```\\r\\n[codesandbox](https://codesandbox.io/s/to-do-usesyncexternalstore-brcpe3?file=/src/store.js:483-773)\\r\\n\\r\\n\\r\\n### Let\'s update the VIEW\\r\\n\\r\\n```jsx\\r\\nfunction App() {\\r\\n\\treturn (<div>\\r\\n\\t\\t<List />\\r\\n\\t\\t<Form />\\r\\n\\t</div>);\\r\\n}\\r\\n\\r\\nfunction List() {\\r\\n\\tconst state = useSyncExternalStore(store.subscribe, store.getSnapshot)\\r\\n\\r\\n\\treturn (\\r\\n\\t\\t<ul>\\r\\n\\t\\t\\t{state.todos.map((td, index) => (<li>\\r\\n\\t\\t\\t\\t{td.desc}\\r\\n\\t\\t\\t\\t<button onClick={_=>store.deleteTodo(index)}>\\r\\n\\t\\t\\t\\t\\tDelete\\r\\n\\t\\t\\t\\t</button>\\r\\n\\t\\t\\t</li>))}\\r\\n\\t\\t</ul>\\r\\n\\t)\\r\\n}\\r\\n\\r\\nfunction Form() {\\r\\n\\tconst state = useSyncExternalStore(store.subscribe, store.getSnapshot)\\r\\n\\tconst handleChange = e => store.setTodoInEditProp({desc:e.target.value})\\r\\n\\tconst handleClickAdd = _ => store.addTodoInEdit()\\r\\n\\r\\n\\treturn (<div>\\r\\n\\t\\t<input\\r\\n\\t\\t\\tvalue={state.todoInEdit.desc}\\r\\n\\t\\t\\tonChange={handleChange}\\r\\n\\t\\t/>\\r\\n\\t\\t<button onClick={handleClickAdd}>Add</button>\\r\\n\\t</div>)\\r\\n}\\r\\n```\\r\\n[codesandbox](https://codesandbox.io/s/to-do-usesyncexternalstore-brcpe3?file=/src/index.js:130-828)\\r\\n\\r\\nThe STORE is responsible for managing the LOGIC and the STATE  \\r\\nthe VIEW simply synchronises with the STORE  \\r\\n\\r\\nThe COMPONENTS are more readable\\r\\n\\r\\nand can be moved without problems.\\r\\nFor example, `List` can be put inside another component without changing anything  \\r\\nbecause it is no longer \\"dependent\\" on its PARENT  \\r\\nIn fact `List` has no properties  \\r\\n\\r\\nthis also makes unit-testing easier.  \\r\\n\\r\\nIn short, if I have to change the behavior I have to look at the STOREs.  \\r\\nIf I have to change the display I will have to act on the COMPONENTS   \\r\\n\\r\\n\\r\\n## Jon\\r\\n\\r\\nThere are many libraries in React (as usual) that allow STATE management.  \\r\\nOf course I made one \ud83d\ude03  \\r\\nIn my opinion, compared to the others, it allows  \\r\\n1) to see perfectly how it works under the hood. NO MAGIC  \\r\\n2) is super light  \\r\\n3) does only this, and nothing else  \\r\\n  \\r\\nIf you want, check it out [here](https://priolo.github.io/jon-doc/docs/why)"}]}')}}]);