"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[255],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=u(n),m=a,f=d["".concat(s,".").concat(m)]||d[m]||c[m]||l;return n?r.createElement(f,o(o({ref:t},p),{},{components:n})):r.createElement(f,o({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,o=new Array(l);o[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var u=2;u<l;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3546:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>l,metadata:()=>i,toc:()=>u});var r=n(7462),a=(n(7294),n(3905));const l={id:"store-setup",title:"StoreSetup",sidebar_label:"StoreSetup",sidebar_position:1},o=void 0,i={unversionedId:"references/store-setup",id:"references/store-setup",title:"StoreSetup",description:"It is a generic js object used to build the Store",source:"@site/docs/10-references/1-store-setup.md",sourceDirName:"10-references",slug:"/references/store-setup",permalink:"/jon-doc/docs/references/store-setup",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"store-setup",title:"StoreSetup",sidebar_label:"StoreSetup",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Reference",permalink:"/jon-doc/docs/references/"},next:{title:"Store",permalink:"/jon-doc/docs/references/store"}},s={},u=[{value:"state",id:"state",level:2},{value:"Rules",id:"rules",level:4},{value:"getters",id:"getters",level:2},{value:"Rules",id:"rules-1",level:4},{value:"actions",id:"actions",level:2},{value:"Rules",id:"rules-2",level:4},{value:"mutators",id:"mutators",level:2},{value:"Rules",id:"rules-3",level:4}],p={toc:u};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"It is a generic js object used to build the Store",(0,a.kt)("br",{parentName:"p"}),"\n","It could be thought of as a configuration",(0,a.kt)("br",{parentName:"p"}),"\n","Its declaration is:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const setup = {\n    state: any|()=>any),\n    getters: { [name: string]: CallStoreSetup },\n    actions: { [name: string]: CallStoreSetup },\n    mutators: { [name: string]: CallStoreSetup }\n}\n\nconst store1 = createStore(setup)\nconst store2 = createStore(setup)\n")),(0,a.kt)("h2",{id:"state"},"state"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"any|()=>any"),(0,a.kt)("br",{parentName:"p"}),"\n","Initialises the state of the STORE.",(0,a.kt)("br",{parentName:"p"}),"\n","If it is a ",(0,a.kt)("inlineCode",{parentName:"p"},"function")," this is executed when the STORE is created.",(0,a.kt)("br",{parentName:"p"}),"\n","Then the returned value is assigned to the ",(0,a.kt)("inlineCode",{parentName:"p"},"state")," of the STORE.   "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"{\n    state: () => {\n        ...\n        return value\n    },\n    ...\n}\n")),(0,a.kt)("h4",{id:"rules"},"Rules"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The STATE is a JSON so there should be no complex objects (only string or number)",(0,a.kt)("br",{parentName:"li"}),"and ESPECIALLY no reference to external objects!  "),(0,a.kt)("li",{parentName:"ul"},"It is IMMUTABLE. That is, if I have a STATE it always displays the same VIEW  ")),(0,a.kt)("h2",{id:"getters"},"getters"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"{ [name: string]: CallStoreSetup }"),(0,a.kt)("br",{parentName:"p"}),"\n","A ",(0,a.kt)("inlineCode",{parentName:"p"},"dictionary"),". It groups functions that allow a value to be taken from the STORE"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"{\n    getters: {\n        getValue1: (_, {state}) => state.value1,\n        getValue2: (param1, {state}) => state.value2 + param1,\n        ...\n    },\n    ...\n}\n")),(0,a.kt)("h4",{id:"rules-1"},"Rules"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"They are PURE FUNCTIONS and",(0,a.kt)("br",{parentName:"li"}),"can only use the STATE and other GETTERS of the same STORE in addition, of course, to the ",(0,a.kt)("inlineCode",{parentName:"li"},"payload")),(0,a.kt)("li",{parentName:"ul"},"Always return a value")),(0,a.kt)("h2",{id:"actions"},"actions"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"{ [name: string]: CallStoreSetup }"),(0,a.kt)("br",{parentName:"p"}),"\n","A ",(0,a.kt)("inlineCode",{parentName:"p"},"dictionary"),". It groups functions which perform an atomic action.\nThis can call external resources"),(0,a.kt)("h4",{id:"rules-2"},"Rules"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"They can be ",(0,a.kt)("inlineCode",{parentName:"li"},"async")," "),(0,a.kt)("li",{parentName:"ul"},"They can call external functions or ACTIONS from another STORE")),(0,a.kt)("h2",{id:"mutators"},"mutators"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"{ [name: string]: CallStoreSetup }"),(0,a.kt)("br",{parentName:"p"}),"\n","A ",(0,a.kt)("inlineCode",{parentName:"p"},"dictionary"),". It groups functions that change state resulting in an interface update (VIEW)"),(0,a.kt)("h4",{id:"rules-3"},"Rules"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"the only functions that can replace one STATE with another STATE",(0,a.kt)("br",{parentName:"li"}),"(STATEs are by themselves immutable)"),(0,a.kt)("li",{parentName:"ul"},"They accept a STATE and possibly a paylod and return the new modified STATE")))}c.isMDXComponent=!0}}]);